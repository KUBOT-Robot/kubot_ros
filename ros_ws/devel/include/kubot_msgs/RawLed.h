// Generated by gencpp from file kubot_msgs/RawLed.msg
// DO NOT EDIT!


#ifndef KUBOT_MSGS_MESSAGE_RAWLED_H
#define KUBOT_MSGS_MESSAGE_RAWLED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kubot_msgs
{
template <class ContainerAllocator>
struct RawLed_
{
  typedef RawLed_<ContainerAllocator> Type;

  RawLed_()
    : header()
    , set_ledNum(0)
    , set_led_brightness(0)
    , set_led_speed(0)
    , set_led_color(0)
    , set_led_mode(0)  {
    }
  RawLed_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , set_ledNum(0)
    , set_led_brightness(0)
    , set_led_speed(0)
    , set_led_color(0)
    , set_led_mode(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _set_ledNum_type;
  _set_ledNum_type set_ledNum;

   typedef int8_t _set_led_brightness_type;
  _set_led_brightness_type set_led_brightness;

   typedef int8_t _set_led_speed_type;
  _set_led_speed_type set_led_speed;

   typedef int8_t _set_led_color_type;
  _set_led_color_type set_led_color;

   typedef int8_t _set_led_mode_type;
  _set_led_mode_type set_led_mode;





  typedef boost::shared_ptr< ::kubot_msgs::RawLed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kubot_msgs::RawLed_<ContainerAllocator> const> ConstPtr;

}; // struct RawLed_

typedef ::kubot_msgs::RawLed_<std::allocator<void> > RawLed;

typedef boost::shared_ptr< ::kubot_msgs::RawLed > RawLedPtr;
typedef boost::shared_ptr< ::kubot_msgs::RawLed const> RawLedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kubot_msgs::RawLed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kubot_msgs::RawLed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kubot_msgs::RawLed_<ContainerAllocator1> & lhs, const ::kubot_msgs::RawLed_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.set_ledNum == rhs.set_ledNum &&
    lhs.set_led_brightness == rhs.set_led_brightness &&
    lhs.set_led_speed == rhs.set_led_speed &&
    lhs.set_led_color == rhs.set_led_color &&
    lhs.set_led_mode == rhs.set_led_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kubot_msgs::RawLed_<ContainerAllocator1> & lhs, const ::kubot_msgs::RawLed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kubot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kubot_msgs::RawLed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kubot_msgs::RawLed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kubot_msgs::RawLed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kubot_msgs::RawLed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kubot_msgs::RawLed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kubot_msgs::RawLed_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kubot_msgs::RawLed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea5dba668be3a2d8b0e755084e1b5670";
  }

  static const char* value(const ::kubot_msgs::RawLed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea5dba668be3a2d8ULL;
  static const uint64_t static_value2 = 0xb0e755084e1b5670ULL;
};

template<class ContainerAllocator>
struct DataType< ::kubot_msgs::RawLed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kubot_msgs/RawLed";
  }

  static const char* value(const ::kubot_msgs::RawLed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kubot_msgs::RawLed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int8 set_ledNum\n"
"int8 set_led_brightness\n"
"int8 set_led_speed\n"
"int8 set_led_color\n"
"int8 set_led_mode\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kubot_msgs::RawLed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kubot_msgs::RawLed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.set_ledNum);
      stream.next(m.set_led_brightness);
      stream.next(m.set_led_speed);
      stream.next(m.set_led_color);
      stream.next(m.set_led_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawLed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kubot_msgs::RawLed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kubot_msgs::RawLed_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "set_ledNum: ";
    Printer<int8_t>::stream(s, indent + "  ", v.set_ledNum);
    s << indent << "set_led_brightness: ";
    Printer<int8_t>::stream(s, indent + "  ", v.set_led_brightness);
    s << indent << "set_led_speed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.set_led_speed);
    s << indent << "set_led_color: ";
    Printer<int8_t>::stream(s, indent + "  ", v.set_led_color);
    s << indent << "set_led_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.set_led_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUBOT_MSGS_MESSAGE_RAWLED_H
