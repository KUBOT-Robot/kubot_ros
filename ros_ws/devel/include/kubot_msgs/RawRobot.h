// Generated by gencpp from file kubot_msgs/RawRobot.msg
// DO NOT EDIT!


#ifndef KUBOT_MSGS_MESSAGE_RAWROBOT_H
#define KUBOT_MSGS_MESSAGE_RAWROBOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace kubot_msgs
{
template <class ContainerAllocator>
struct RawRobot_
{
  typedef RawRobot_<ContainerAllocator> Type;

  RawRobot_()
    : header()
    , bumper_status(false)
    , sona1_dis(0)
    , sona2_dis(0)
    , sona3_dis(0)
    , sona4_dis(0)  {
    }
  RawRobot_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , bumper_status(false)
    , sona1_dis(0)
    , sona2_dis(0)
    , sona3_dis(0)
    , sona4_dis(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _bumper_status_type;
  _bumper_status_type bumper_status;

   typedef uint8_t _sona1_dis_type;
  _sona1_dis_type sona1_dis;

   typedef uint8_t _sona2_dis_type;
  _sona2_dis_type sona2_dis;

   typedef uint8_t _sona3_dis_type;
  _sona3_dis_type sona3_dis;

   typedef uint8_t _sona4_dis_type;
  _sona4_dis_type sona4_dis;





  typedef boost::shared_ptr< ::kubot_msgs::RawRobot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kubot_msgs::RawRobot_<ContainerAllocator> const> ConstPtr;

}; // struct RawRobot_

typedef ::kubot_msgs::RawRobot_<std::allocator<void> > RawRobot;

typedef boost::shared_ptr< ::kubot_msgs::RawRobot > RawRobotPtr;
typedef boost::shared_ptr< ::kubot_msgs::RawRobot const> RawRobotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kubot_msgs::RawRobot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kubot_msgs::RawRobot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kubot_msgs::RawRobot_<ContainerAllocator1> & lhs, const ::kubot_msgs::RawRobot_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.bumper_status == rhs.bumper_status &&
    lhs.sona1_dis == rhs.sona1_dis &&
    lhs.sona2_dis == rhs.sona2_dis &&
    lhs.sona3_dis == rhs.sona3_dis &&
    lhs.sona4_dis == rhs.sona4_dis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kubot_msgs::RawRobot_<ContainerAllocator1> & lhs, const ::kubot_msgs::RawRobot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kubot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kubot_msgs::RawRobot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kubot_msgs::RawRobot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kubot_msgs::RawRobot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kubot_msgs::RawRobot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kubot_msgs::RawRobot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kubot_msgs::RawRobot_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kubot_msgs::RawRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "509b6781cd16934dc0eb2392de02e97a";
  }

  static const char* value(const ::kubot_msgs::RawRobot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x509b6781cd16934dULL;
  static const uint64_t static_value2 = 0xc0eb2392de02e97aULL;
};

template<class ContainerAllocator>
struct DataType< ::kubot_msgs::RawRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kubot_msgs/RawRobot";
  }

  static const char* value(const ::kubot_msgs::RawRobot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kubot_msgs::RawRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"bool bumper_status\n"
"uint8 sona1_dis\n"
"uint8 sona2_dis\n"
"uint8 sona3_dis\n"
"uint8 sona4_dis\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::kubot_msgs::RawRobot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kubot_msgs::RawRobot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.bumper_status);
      stream.next(m.sona1_dis);
      stream.next(m.sona2_dis);
      stream.next(m.sona3_dis);
      stream.next(m.sona4_dis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawRobot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kubot_msgs::RawRobot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kubot_msgs::RawRobot_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "bumper_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bumper_status);
    s << indent << "sona1_dis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sona1_dis);
    s << indent << "sona2_dis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sona2_dis);
    s << indent << "sona3_dis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sona3_dis);
    s << indent << "sona4_dis: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sona4_dis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUBOT_MSGS_MESSAGE_RAWROBOT_H
